// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 显示对话出现消息列表
	// (POST /api/v1/relation/dialog/{id}/show)
	ShowDialog(c *gin.Context, id uint32)
	// 置顶对话
	// (POST /api/v1/relation/dialog/{id}/top)
	TopDialog(c *gin.Context, id uint32)
	// 获取群聊列表
	// (GET /api/v1/relation/group)
	ListGroup(c *gin.Context, params ListGroupParams)
	// 获取群聊申请列表
	// (GET /api/v1/relation/group/request)
	ListGroupRequest(c *gin.Context, params ListGroupRequestParams)
	// 删除群聊申请记录
	// (DELETE /api/v1/relation/group/request/{id})
	DeleteGroupRequest(c *gin.Context, id uint32)
	// 管理群聊请求
	// (PUT /api/v1/relation/group/request/{id})
	ManageGroupRequest(c *gin.Context, id uint32)
	// 退出群聊
	// (DELETE /api/v1/relation/group/{id})
	QuitGroup(c *gin.Context, id uint32)
	// 添加群聊管理员
	// (POST /api/v1/relation/group/{id}/admin)
	AddGroupAdmin(c *gin.Context, id uint32)
	// 获取群聊公告
	// (GET /api/v1/relation/group/{id}/announcement)
	ListGroupAnnouncement(c *gin.Context, id uint32)
	// 添加群聊公告
	// (POST /api/v1/relation/group/{id}/announcement)
	AddGroupAnnouncement(c *gin.Context, id uint32)
	// 删除群聊公告
	// (DELETE /api/v1/relation/group/{id}/announcement/{aid})
	DeleteGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 获取群聊公告
	// (GET /api/v1/relation/group/{id}/announcement/{aid})
	GetGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 修改群聊公告
	// (PUT /api/v1/relation/group/{id}/announcement/{aid})
	UpdateGroupAnnouncement(c *gin.Context, id uint32, aid uint32)
	// 设置群聊公告已读
	// (POST /api/v1/relation/group/{id}/announcement/{aid}/read)
	SetGroupAnnouncementRead(c *gin.Context, id uint32, aid uint32)
	// 获取群聊公告已读列表
	// (POST /api/v1/relation/group/{id}/announcement/{aid}/reader)
	ListGroupAnnouncementRead(c *gin.Context, id uint32, aid uint32)
	// 邀请加入群聊
	// (POST /api/v1/relation/group/{id}/invite)
	InviteJoinGroup(c *gin.Context, id uint32)
	// 移除群聊成员
	// (DELETE /api/v1/relation/group/{id}/member)
	RemoveGroupMember(c *gin.Context, id uint32)
	// 获取群成员列表
	// (GET /api/v1/relation/group/{id}/member)
	ListGroupMember(c *gin.Context, id uint32)
	// 设置自己在群聊内的昵称
	// (PUT /api/v1/relation/group/{id}/remark)
	SetGroupRemark(c *gin.Context, id uint32)
	// 添加群聊申请
	// (POST /api/v1/relation/group/{id}/request)
	AddGroupRequest(c *gin.Context, id uint32)
	// 设置群聊静默通知
	// (POST /api/v1/relation/group/{id}/silent)
	SetGroupSilent(c *gin.Context, id uint32)
	// 获取黑名单
	// (GET /api/v1/relation/user/blacklist)
	Blacklist(c *gin.Context, params BlacklistParams)
	// 添加到黑名单
	// (POST /api/v1/relation/user/blacklist)
	AddBlacklist(c *gin.Context)
	// 从黑名单中移除
	// (DELETE /api/v1/relation/user/blacklist/{id})
	DeleteBlacklist(c *gin.Context, id string)
	// 获取好友列表
	// (GET /api/v1/relation/user/friend)
	ListFriend(c *gin.Context)
	// 添加好友
	// (POST /api/v1/relation/user/friend)
	AddFriend(c *gin.Context)
	// 删除好友
	// (DELETE /api/v1/relation/user/friend/{id})
	DeleteFriend(c *gin.Context, id string)
	// 设置用户阅后即焚
	// (POST /api/v1/relation/user/friend/{id}/burn)
	SetUserBurn(c *gin.Context, id string)
	// 设置好友备注
	// (POST /api/v1/relation/user/friend/{id}/remark)
	SetUserRemark(c *gin.Context, id string)
	// 设置好友静默通知
	// (POST /api/v1/relation/user/friend/{id}/silent)
	SetUserSilent(c *gin.Context, id string)
	// 获取好友请求列表
	// (GET /api/v1/relation/user/friend_request)
	ListFriendRequest(c *gin.Context, params ListFriendRequestParams)
	// 删除好友申请
	// (DELETE /api/v1/relation/user/friend_request/{id})
	DeleteFriendRequest(c *gin.Context, id uint32)
	// 管理好友请求
	// (PUT /api/v1/relation/user/friend_request/{id})
	ManageFriendRequest(c *gin.Context, id uint32)
	// 交换用户端到端公钥
	// (POST /api/v1/relation/user/{id}/e2e_key)
	ExchangeE2EKey(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ShowDialog operation middleware
func (siw *ServerInterfaceWrapper) ShowDialog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ShowDialog(c, id)
}

// TopDialog operation middleware
func (siw *ServerInterfaceWrapper) TopDialog(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.TopDialog(c, id)
}

// ListGroup operation middleware
func (siw *ServerInterfaceWrapper) ListGroup(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroup(c, params)
}

// ListGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) ListGroupRequest(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListGroupRequestParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupRequest(c, params)
}

// DeleteGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupRequest(c, id)
}

// ManageGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) ManageGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ManageGroupRequest(c, id)
}

// QuitGroup operation middleware
func (siw *ServerInterfaceWrapper) QuitGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.QuitGroup(c, id)
}

// AddGroupAdmin operation middleware
func (siw *ServerInterfaceWrapper) AddGroupAdmin(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupAdmin(c, id)
}

// ListGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) ListGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupAnnouncement(c, id)
}

// AddGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) AddGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupAnnouncement(c, id)
}

// DeleteGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) DeleteGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteGroupAnnouncement(c, id, aid)
}

// GetGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) GetGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetGroupAnnouncement(c, id, aid)
}

// UpdateGroupAnnouncement operation middleware
func (siw *ServerInterfaceWrapper) UpdateGroupAnnouncement(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateGroupAnnouncement(c, id, aid)
}

// SetGroupAnnouncementRead operation middleware
func (siw *ServerInterfaceWrapper) SetGroupAnnouncementRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupAnnouncementRead(c, id, aid)
}

// ListGroupAnnouncementRead operation middleware
func (siw *ServerInterfaceWrapper) ListGroupAnnouncementRead(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Path parameter "aid" -------------
	var aid uint32

	err = runtime.BindStyledParameterWithOptions("simple", "aid", c.Param("aid"), &aid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter aid: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupAnnouncementRead(c, id, aid)
}

// InviteJoinGroup operation middleware
func (siw *ServerInterfaceWrapper) InviteJoinGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.InviteJoinGroup(c, id)
}

// RemoveGroupMember operation middleware
func (siw *ServerInterfaceWrapper) RemoveGroupMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RemoveGroupMember(c, id)
}

// ListGroupMember operation middleware
func (siw *ServerInterfaceWrapper) ListGroupMember(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListGroupMember(c, id)
}

// SetGroupRemark operation middleware
func (siw *ServerInterfaceWrapper) SetGroupRemark(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupRemark(c, id)
}

// AddGroupRequest operation middleware
func (siw *ServerInterfaceWrapper) AddGroupRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroupRequest(c, id)
}

// SetGroupSilent operation middleware
func (siw *ServerInterfaceWrapper) SetGroupSilent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetGroupSilent(c, id)
}

// Blacklist operation middleware
func (siw *ServerInterfaceWrapper) Blacklist(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BlacklistParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Blacklist(c, params)
}

// AddBlacklist operation middleware
func (siw *ServerInterfaceWrapper) AddBlacklist(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddBlacklist(c)
}

// DeleteBlacklist operation middleware
func (siw *ServerInterfaceWrapper) DeleteBlacklist(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteBlacklist(c, id)
}

// ListFriend operation middleware
func (siw *ServerInterfaceWrapper) ListFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriend(c)
}

// AddFriend operation middleware
func (siw *ServerInterfaceWrapper) AddFriend(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddFriend(c)
}

// DeleteFriend operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriend(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriend(c, id)
}

// SetUserBurn operation middleware
func (siw *ServerInterfaceWrapper) SetUserBurn(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserBurn(c, id)
}

// SetUserRemark operation middleware
func (siw *ServerInterfaceWrapper) SetUserRemark(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserRemark(c, id)
}

// SetUserSilent operation middleware
func (siw *ServerInterfaceWrapper) SetUserSilent(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SetUserSilent(c, id)
}

// ListFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) ListFriendRequest(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListFriendRequestParams

	// ------------- Optional query parameter "page_num" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_num", c.Request.URL.Query(), &params.PageNum)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListFriendRequest(c, params)
}

// DeleteFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) DeleteFriendRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteFriendRequest(c, id)
}

// ManageFriendRequest operation middleware
func (siw *ServerInterfaceWrapper) ManageFriendRequest(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id uint32

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ManageFriendRequest(c, id)
}

// ExchangeE2EKey operation middleware
func (siw *ServerInterfaceWrapper) ExchangeE2EKey(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeE2EKey(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/v1/relation/dialog/:id/show", wrapper.ShowDialog)
	router.POST(options.BaseURL+"/api/v1/relation/dialog/:id/top", wrapper.TopDialog)
	router.GET(options.BaseURL+"/api/v1/relation/group", wrapper.ListGroup)
	router.GET(options.BaseURL+"/api/v1/relation/group/request", wrapper.ListGroupRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/request/:id", wrapper.DeleteGroupRequest)
	router.PUT(options.BaseURL+"/api/v1/relation/group/request/:id", wrapper.ManageGroupRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id", wrapper.QuitGroup)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/admin", wrapper.AddGroupAdmin)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/announcement", wrapper.ListGroupAnnouncement)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement", wrapper.AddGroupAnnouncement)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.DeleteGroupAnnouncement)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.GetGroupAnnouncement)
	router.PUT(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid", wrapper.UpdateGroupAnnouncement)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid/read", wrapper.SetGroupAnnouncementRead)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/announcement/:aid/reader", wrapper.ListGroupAnnouncementRead)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/invite", wrapper.InviteJoinGroup)
	router.DELETE(options.BaseURL+"/api/v1/relation/group/:id/member", wrapper.RemoveGroupMember)
	router.GET(options.BaseURL+"/api/v1/relation/group/:id/member", wrapper.ListGroupMember)
	router.PUT(options.BaseURL+"/api/v1/relation/group/:id/remark", wrapper.SetGroupRemark)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/request", wrapper.AddGroupRequest)
	router.POST(options.BaseURL+"/api/v1/relation/group/:id/silent", wrapper.SetGroupSilent)
	router.GET(options.BaseURL+"/api/v1/relation/user/blacklist", wrapper.Blacklist)
	router.POST(options.BaseURL+"/api/v1/relation/user/blacklist", wrapper.AddBlacklist)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/blacklist/:id", wrapper.DeleteBlacklist)
	router.GET(options.BaseURL+"/api/v1/relation/user/friend", wrapper.ListFriend)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend", wrapper.AddFriend)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/friend/:id", wrapper.DeleteFriend)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/burn", wrapper.SetUserBurn)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/remark", wrapper.SetUserRemark)
	router.POST(options.BaseURL+"/api/v1/relation/user/friend/:id/silent", wrapper.SetUserSilent)
	router.GET(options.BaseURL+"/api/v1/relation/user/friend_request", wrapper.ListFriendRequest)
	router.DELETE(options.BaseURL+"/api/v1/relation/user/friend_request/:id", wrapper.DeleteFriendRequest)
	router.PUT(options.BaseURL+"/api/v1/relation/user/friend_request/:id", wrapper.ManageFriendRequest)
	router.POST(options.BaseURL+"/api/v1/relation/user/:id/e2e_key", wrapper.ExchangeE2EKey)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd63PTVtr/VzR63w/tjMFOoH37esYfQqEdurTLQjv7gclkFOvEUbElVZIDWSYzDpuQ",
	"cMkFSiFNYYFOuMy2xGlpE4gh/DGNJPtT/4Wdc47uOrr4WAEvky8Mlq3nPOd5fs/1XHKBLUs1WRKBqKls",
	"8QKrlsdBjUP/PVLlymfhf2RFkoGiCQA95iY4jVPg/3iglhVB1gRJZIusefOJMb+lr/2m/3OJzbHapAzY",
	"IqtqiiBW2Bx7/kBFOgAfHlDPCvIBCb3GVQ/IkiBqQGGLmlIHUzm2LKnqiMCH6dtf0JMWhfJZkauBKN6N",
	"ld/Nxxs9DFBXgULkHdM/fpSa9pTzojT6NShr7FQO66cqqFpYR/ZTEhft5pbxy0V9/nb7wRM2xwoaqKF3",
	"/lcBY2yR/Z+8C4i8hYY8hoLLBKco3CT6LGlcNTwSHsNotIzvoDzHJKXGaWyRFUTtw8OuEOAMK0Bh4fQU",
	"8E1dUADPFs9g9m3iOVbmKoAdJkjgE0UAIn8KfFMHJCmUFcBpYIQjiEJ/+EpfuorZNFdn9Pkf9Na2cXuz",
	"c/s3Y/5ZGpZzLDgvQ4bT0G+/njPu3OuSPglIXrrt9Q391XeQ+5vN3ecN4/5cu3nJ/PmRl3pdELVDg0Ty",
	"CigDYSICsMbiQ+PmZrsxSyRPax/ukOKYlIQ5n3K/UoFyHL6EqNQ45Wy8bPS1OePZE1pW4c+kGrQMWZtk",
	"i2NcVYXsq0DkI+SlL13vNKazlpc9YC/SUjVOq6uJCDWvbBqNaea9Qsm8+azd3Np9/jTHDJT0rV87jdX2",
	"67kcM1hq//iTcfWG2br7frIJI0ftCgzpXpAFIGr4o8VWzmOkPotKNHdnjtkEKJrIQx9SqGJFUMQ2hZyH",
	"QYefnC0GkiA/VaS6PCSKUl0sgxoQSbFiZ81szeizP+vXr0AX7HeskqgR38K/1y/N6usviCKO8cgeF5zO",
	"P1bgLMgiRMwjEabxhESDRjNJTQJKh9OkdLZ6elxSAh6N40eQOu3AnSoqh9R4CnA8pEuM1IJWBVHzNO7P",
	"dX5cIcJU5qM0Zvzwm3FrI73GSB7C0aHNYM4Bl981uHwEhR0SXyrEnyBnSB7UOxkSObWi01AXORTOnjpz",
	"S6kgGJdBpRKIg51YoXRWZtvNFnZRIdFwHnIjGRhVPxk4whjJCrBEuvFbkBSg9BS9R42g2QWV5k7VHS01",
	"gICSbFdYYO3G7J4YWKwLtA1tj8ypy3RkZ609fSU6HeEFripVyHbUfNFu3kXKooU/Hj01iYgcB09heSEi",
	"x3FzT98YHxGHwE/IQ5i/tPR/XQ3y+lHKIONPiDy5pytii1Ckak/Eltkczws4hT/p+z49hG37DkHWx01v",
	"5UtsnAmLspfBpqLk+DmojeIYk85IhtBz5qtTJzKu5QQeiJoAnwSHRHwyCqhy8AFj/xCWRtAfMgMljq8J",
	"IjNYks6JQIG1EBDrNbZ4ppAbyA0OJ4M0i47VF26in6VYomrrU/h5toNFBjPowBn6bhkNJOMNPL0hWwAP",
	"mnIvfT5El6bJ9TH6imeGtHSJCSIlkVXyMf4Oa0WsV6vcKCwnsLhDjj+uNXYMf5eaK5yrRDkIbK1DtmsP",
	"cRKdQ+I3u0xGycaISX1BMkfnTXJ4w29+OSkD5s+X84USTJFeNsydNWagZD6e1puXzJ21P19e9jmZ7FxM",
	"pHMkeQAEQKaLjLmLZh+hJH6DjqiLPluIUTfHSfQNlghP4zcSbT0rl2S7jr3ySacjOow2YvD3MH6eBCIv",
	"iJUcM1AaKpeBrAE+xwyWTgFIFvCEUJoprE8qYAwoQCxjSfrlKslAHBmtK+IIN6YBZQRWQRBZ4Xxppakv",
	"P9JfNvTlZmdlVl9e1BeemTOrLiZHJakKONHqC5GojmhCDYxIdXI96ZBsb84atzed2pJkY2QrsVudxCY4",
	"BK1QheWeKGnCmFDm8FuxE737fae10mmsmvceEiYayLpJ5B1mI4XCphAXKUH3m2QWqWVSM5iUm9BlazRZ",
	"UHQfONz9dSdCkhwcATfV97C+8TrLd7i8cWWZyn1ntTLrXwJ9Wyu05bqiQIuPXKntbbWm8+2OsfiwKzP9",
	"+K+nT0eYaWJjJXWKA2qcUI1i3bz5u/50uXNxfbe1SWKjCjSN1G7tPLqlP71tNBfOgsmM8xz61SrZHzrj",
	"EOmNsgg1uJAeiVqItBQ9+8x81rJWIQulzvfXzJv3dre3mYESXqlkBkvG1cud1nXmUEmfv9/5fi2QLeQO",
	"DZN0pAoVkdPqSuSkzac7+vJCfPuK+B7ildzKAnGoaDfv6ktb5v3pvV4W9IQDjFTMmbcT5ggnoivmriwG",
	"9ejHRNjmUVpdriuCNnkaIgMD5wjgFKAM1bVx+GkUffrEtrTP/v4l5AP9GmYX6Ft3vuOaJrNTkLCdqIck",
	"tLu9aK4/MJcv+UC1OsMMnTz+58tr+qOLGEx/NKY7rev68oK+8J1+45q1Cv708h+Ni85KVJHFrxt3FvQr",
	"DyAFNsdOAEXFow0cLBws2CkeJwtskT10sHDwENqvoo2j2eY5WchPDORt2eWxaPMXBH4qr45L55A7lEgR",
	"wVjZMde2sT/S57bNxQ1jc96YbjrRAS+CCZJ4nGeLMAc6dxQRR+MrXA1oQFHZ4pmY3rEAP0Nm7R5pkbVU",
	"baMJ+xJs2Skb58P4faBqRyR+MrBazMly1UoI81+rOOl0qfsDgy0fUlKKpZMiEYU0CNicCk4SPVBlSVTx",
	"4IOFQoJO7jzxKsSYX9av3POhHsnei/czw1A4ar1W45TJNCrWuArUIBuADzsMh4nFlibJ0dAyX613Hmzi",
	"cUNA+lKS3zEcWbIgwQhLIhlGkERmKPKKnwY2AfV1BxLUi4I8VQABGe3FLX3plrWqQ3Y0MKtFxX8SPjoP",
	"fschDqHjmzpQJl14wDxxBMZuLyh4MMbVqxpbHCClnwT6+tpjfWMpbghV+AeIGKMQhbmw/lIDL7EVg2oC",
	"BJwkwdMgg6i+ED4wBGLgkVfcXnMiTPBusSSw2PXJPmZCmOm6j4cxFCz04jHl1VKvyAponB5fKFRhAVeB",
	"RtqbhNJ876h4y2sIZ0cRgW6Q5iW3xzEsKR5EzZJGTzESi9RTjpVJfUgrj0akcH4cEvvnnMhV+lXsWaQO",
	"XJncGS0U8T5YZqCoL18zZpaCyzMJ3ROLbnYpRUhXVIkFSeMU5p1k1p1GA6a7aJwQpv5WF9LlF54NLG/P",
	"dr1ToRF5QBSUws6jDQkxteRWS79y3/IKSMn69ZWQ5Id4Hu+mQsRSSR91I/rbhK1uiBrdUAn3W0NNmRp3",
	"/jj+cvCDD3JsTRCtjwN0S2opm8q0ZSpJ3VQFagRuqGEa2HGeXIPY288j0krfztp+QOxe1g6h3ctJdQTe",
	"2d1rHWGrIC5/SPQ6EYp0XE6/6TELz5P2kESNO38CiBWoiIFCoUDoCafbuu+nk9QlDu627yEX2RuIk+Ad",
	"hlSvbi0Z3l34tPwFrouKJsImPLVMP5lFLmLvr7uLnjAs9xZKKHpcEJUT4/Zow9enQNtX79uImn0UMUkV",
	"9+7rdePmi1jofIVOQe2jZz9WZ1IphBFHA34ibrOLp3kFcHx0cdte3zFfrXtH17d+bTdb4SVSgts9BUnv",
	"u95ohERJl8pJRmsqY7RYJ0zIeAm5asxF0hLGPmzeQsT2nClMFbt9quwxggdgQQtRQZwQcClAxmPnYqPd",
	"3NKv3NdnH0b0RI8jEp9Jgtg/ndEsom7NOQwW3XoLrHL5A6NFILN4GNaFtSUT3e5B1eAlaZcWSq68oupL",
	"83HLKWEgu4Q27ylQkyaA96zSOwyn0EywUMh3eaTu8u41DMNapFrOIWGBupzFFJKCZB8hai9DlOfIYEJY",
	"8oqtp8IyIH9aF+IeGCGWoDhFa8/9W9/6Rb/zxAqHl2bN1RlnbzA5q3bOZb0bviTyYA3Wqi0LTx13aBC5",
	"DKes29uzq5SexZuC40nQJ/LxKKEHqHvONXkxE20niFxWSLsp4d0ApbUvB5352n39wJhusn2JwbACe16b",
	"tGFACzp8Xi1djyFwEo7sDU9jgu/KUpYrH9IuWpqzgdklS1G66bVDEZxVN9Cqq0DJj3qv54xJrpyDCLvP",
	"n5qrM9bJBXKi5V75ub+Tsqu0zRUcIWGL0wBFtuaQI8EGQiNm0VzfsI6uYP+mz294qYXCnBcPme6XIYD1",
	"0bTlc1dnHJ4caXVxLim7MgkLCtk5QVwU4SQg7ijlJZt84h643daiD3W4VrOvVSOtCKc2/fajaTJ1W1fm",
	"6gxlzAkqeLhbNREZg7X34cJhgjHceeL9tXF5Z/f5gj6/Ycmpu0UK4sgUOh5DB26Tti/ZgsbHzWLKZnx+",
	"l30Tm8gDp71TbCH3cU/hCQOz790ZxopziOc90szCGYJBMCLXR6tCeeQsmIw80vlTE3LXvKTP/ty58fAN",
	"3ciEe5JYIN7U/03d0eSNBxYXll8B57maXAVscWDw0OEPPvy/j/6/8MZjg4UYxBd9eYHfp/cSKU84OMOQ",
	"/L4D6SSn76Vlrs5Q1rNULt47NP3Om0yknR+tK2JiJYfsNnB5S6iSg/7yCKSWeKjByYAykncWvsuWA7Fi",
	"S7q2RhNqIPF2GnwvDfMejKivFszHN95Pc21CF7cOeT0Emk7WRWMIBj0UjSRI9QRkT6s2BspWRLRdPxHE",
	"KXuzfQnj+Mv+ewt52fW0vNxgvdAjKTizXjCUrrGFR0xqbEEkpexr9SWS+rmJZXkPDw/ZoCipiZUOSyMp",
	"DwT7i57AbUZRpc/+0WCqhhb5uqnI1Uhv4US/DklUbI+gSsyRjfsvjIV1+8yoL8slL/948+aU6Ar/WZ2+",
	"OBTsz6gjuiROW8TKn6kz7+hlFLdOJ+WExuJDfem2MX8LH4r1yjLiyHB/62YvTw4b3y7svrqDrzNnCqWw",
	"xJiBEpZnQIxxx4thugO/PzDBKVAUSHn4Us2gpPG1m/6nULHhTkd8wZ71CWaMceuQIfZV6PKlvUG9d5zo",
	"k85JfgxlWFBwlsTIKdbu9pqx8KPbKZrfgP/anSK/dRw7Xx7nxAo4NnjsL+jyt//CNCtdv8wvhXiseSgO",
	"91fCHq/bSEChIZQJW6t1pWrdblbMQ6QdtBpoB8tSjYUDWoRCF2lPAGVSGxfECsONSnWNQX/3IseC8xpQ",
	"RK56VCoTNsF9Iog8A39dk9C1b77R1XNcpQKUg4Lk/tEHh382nDXhq6KYGvLqNSBqDBB5VGOpbOh9+2ai",
	"MBl8C3ZKKnjhNUwEXZeakgbSxNTw1H8CAAD//5IY6Vz+cgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
